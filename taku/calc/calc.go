package calc

import (
	"bytes"
	"text/template"

	"github.com/kyokomi/gomajan/taku/hora"
	"github.com/kyokomi/gomajan/taku/oyako"
)

type Fu int
type Fan int

var ronCalcPointMap = map[oyako.OyakoType]map[Fu]map[Fan]int{
	oyako.Oya: {
		20:  {1: 0, 2: 2000, 3: 3900, 4: 7700},
		30:  {1: 1500, 2: 2900, 3: 5800, 4: 11600},
		40:  {1: 2000, 2: 3900, 3: 7700, 4: 12000},
		50:  {1: 2400, 2: 4800, 3: 9600, 4: 12000},
		60:  {1: 2900, 2: 5800, 3: 11600, 4: 12000},
		70:  {1: 3400, 2: 6800, 3: 12000, 4: 12000},
		80:  {1: 3900, 2: 7700, 3: 12000, 4: 12000},
		90:  {1: 4400, 2: 8700, 3: 12000, 4: 12000},
		100: {1: 4800, 2: 9600, 3: 12000, 4: 12000},
		110: {1: 0, 2: 10600, 3: 12000, 4: 12000},
	},

	oyako.Ko: {
		20:  {1: 0, 2: 1300, 3: 2600, 4: 5200},
		30:  {1: 1000, 2: 2000, 3: 3900, 4: 7700},
		40:  {1: 1300, 2: 2600, 3: 5200, 4: 8000},
		50:  {1: 1600, 2: 3200, 3: 6400, 4: 8000},
		60:  {1: 2000, 2: 3900, 3: 7700, 4: 8000},
		70:  {1: 2300, 2: 4500, 3: 8000, 4: 8000},
		80:  {1: 2600, 2: 5200, 3: 8000, 4: 8000},
		90:  {1: 2900, 2: 5800, 3: 8000, 4: 8000},
		100: {1: 3200, 2: 6400, 3: 8000, 4: 8000},
		110: {1: 0, 2: 7100, 3: 8000, 4: 8000},
	},
}
var tsumoCalcPointMap = map[oyako.OyakoType]map[Fu]map[Fan][]int{
	oyako.Oya: {
		20:  {1: {0}, 2: {700, 700, 700}, 3: {1300, 1300, 1300}, 4: {2600, 2600, 2600}},
		30:  {1: {500, 500, 500}, 2: {1000, 1000, 1000}, 3: {2000, 2000, 2000}, 4: {3900, 3900, 3900}},
		40:  {1: {700, 700, 700}, 2: {1300, 1300, 1300}, 3: {2600, 2600, 2600}, 4: {4000, 4000, 4000}},
		50:  {1: {800, 800, 800}, 2: {1600, 1600, 1600}, 3: {3200, 3200, 3200}, 4: {4000, 4000, 4000}},
		60:  {1: {1000, 1000, 1000}, 2: {1600, 1600, 1600}, 3: {3900, 3900, 3900}, 4: {4000, 4000, 4000}},
		70:  {1: {1200, 1200, 1200}, 2: {2000, 2000, 2000}, 3: {4000, 4000, 4000}, 4: {4000, 4000, 4000}},
		80:  {1: {1300, 1300, 1300}, 2: {2600, 2600, 2600}, 3: {4000, 4000, 4000}, 4: {4000, 4000, 4000}},
		90:  {1: {1500, 1500, 1500}, 2: {2900, 2900, 2900}, 3: {4000, 4000, 4000}, 4: {4000, 4000, 4000}},
		100: {1: {1600, 1600, 1600}, 2: {3200, 3200, 3200}, 3: {4000, 4000, 4000}, 4: {4000, 4000, 4000}},
		110: {1: {0}, 2: {3600, 3600, 3600}, 3: {4000, 4000, 4000}, 4: {4000, 4000, 4000}},
	},

	oyako.Ko: {
		20:  {1: {0}, 2: {700, 400, 400}, 3: {1300, 700, 700}, 4: {2600, 1300, 1300}},
		30:  {1: {500, 300, 300}, 2: {1000, 500, 500}, 3: {2000, 1000, 1000}, 4: {3900, 2000, 2000}},
		40:  {1: {700, 400, 400}, 2: {1300, 700, 700}, 3: {2600, 1300, 1300}, 4: {4000, 2000, 2000}},
		50:  {1: {800, 400, 400}, 2: {1600, 800, 800}, 3: {3200, 1600, 1600}, 4: {4000, 2000, 2000}},
		60:  {1: {1000, 500, 500}, 2: {2000, 1000, 1000}, 3: {3900, 2000, 2000}, 4: {4000, 2000, 2000}},
		70:  {1: {1200, 600, 600}, 2: {2300, 1200, 1200}, 3: {4000, 2000, 2000}, 4: {4000, 2000, 2000}},
		80:  {1: {1300, 700, 700}, 2: {2600, 1300, 1300}, 3: {4000, 2000, 2000}, 4: {4000, 2000, 2000}},
		90:  {1: {1500, 800, 800}, 2: {2900, 1500, 1500}, 3: {4000, 2000, 2000}, 4: {4000, 2000, 2000}},
		100: {1: {1600, 800, 800}, 2: {3200, 1600, 1600}, 3: {4000, 2000, 2000}, 4: {4000, 2000, 2000}},
		110: {1: {0}, 2: {3600, 1800, 1800}, 3: {4000, 2000, 2000}, 4: {4000, 2000, 2000}},
	},
}

// CalcPoint 和了点数計算結果
// 上がった相手
// 対局情報(東場or南場、海底摸月or河底撈魚or槍槓or嶺上開花、天和or地和or人和、ドラ、裏ドラ）
type CalcPoint struct {
	// Oyako 親子区分
	Oyako oyako.OyakoType
	// Hora 和了区分
	Hora hora.HoraType
	// Fu 符
	Fu Fu
	// Fan 翻
	Fan Fan

	// TODO: あとで

	// TokutenRon ロン点数
	TokutenRon int
	// TokutenTsumo ツモ点数
	TokutenTsumo [2]int

	// TargetIdx 和了対象（ロンの場合のみ）
	TargetID int
	// Yakus 役名:翻数
	Yakus map[string]int
}

func (c CalcPoint) Point() (int, int, int) {
	if c.Hora == hora.Ron {
		return ronCalcPointMap[c.Oyako][c.Fu][c.Fan], 0 , 0
	} else if c.Hora == hora.Tsumo {
		p := tsumoCalcPointMap[c.Oyako][c.Fu][c.Fan]
		return p[0], p[1], p[2]
	} else {
		panic("hora type error")
	}
}

const templateText = `
# 役
{{range $key, $val := .Yakus}}- {{$key}} {{$val}}翻
{{end}}
# 点数
{{.Oyako}} {{.Fu}}符 {{.TotalFan}}翻
{{if .IsRon}}
{{.TokutenRon}}点
{{else}}
{{.TokutenTsumo}}点
{{end}}
`

func (c CalcPoint) String() string {
	var w bytes.Buffer
	t := template.Must(template.New("main").Parse(templateText))
	if err := t.Execute(&w, c); err != nil {
		return err.Error()
	}

	return w.String()
}

// TotalFan 合計翻数を取得
func (c CalcPoint) TotalFan() int {
	fun := 0
	for _, f := range c.Yakus {
		fun += f
	}
	return fun
}

// IsRon ロンか判定
func (c CalcPoint) IsRon() bool {
	return c.Hora == hora.Ron
}

// IsTsumo ツモか判定
func (c CalcPoint) IsTsumo() bool {
	return c.Hora == hora.Tsumo
}
